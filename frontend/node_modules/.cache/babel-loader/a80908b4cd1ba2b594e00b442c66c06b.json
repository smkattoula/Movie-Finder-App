{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/karmicuniverse/Desktop/movie-finder/frontend/src/context/movie/MovieState.js\",\n    _s = $RefreshSig$();\n\nimport React, { useReducer } from \"react\";\nimport axios from \"axios\";\nimport MovieContext from \"./MovieContext\";\nimport MovieReducer from \"./MovieReducer\";\nimport { SEARCH_MOVIES, SET_LOADING, CLEAR_MOVIES } from \"../types\";\n\nconst MovieState = props => {\n  _s();\n\n  const initialState = {\n    movies: [],\n    movie: {},\n    loading: false\n  };\n  const [state, dispatch] = useReducer(MovieReducer, initialState); // Search Movies\n\n  const searchMovies = async text => {\n    setLoading();\n    const res = await axios.get(`SEND REQUEST\n    https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&language=en-US&page=1&include_adult=false`);\n    dispatch({\n      type: SEARCH_MOVIES,\n      payload: res.data.items\n    });\n  }; // Clear Movies\n\n\n  const clearMovies = () => dispatch({\n    type: CLEAR_MOVIES\n  }); // Set Loading\n\n\n  const setLoading = () => dispatch({\n    type: SET_LOADING\n  });\n\n  return /*#__PURE__*/_jsxDEV(MovieContext.Provider, {\n    value: {\n      movies: state.movies,\n      movie: state.movie,\n      loading: state.loading,\n      searchMovies,\n      clearMovies,\n      getMovie\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n\n_s(MovieState, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n\n_c = MovieState;\nexport default MovieState;\n\nvar _c;\n\n$RefreshReg$(_c, \"MovieState\");","map":{"version":3,"sources":["/Users/karmicuniverse/Desktop/movie-finder/frontend/src/context/movie/MovieState.js"],"names":["React","useReducer","axios","MovieContext","MovieReducer","SEARCH_MOVIES","SET_LOADING","CLEAR_MOVIES","MovieState","props","initialState","movies","movie","loading","state","dispatch","searchMovies","text","setLoading","res","get","API_KEY","type","payload","data","items","clearMovies","getMovie","children"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,SAASC,aAAT,EAAwBC,WAAxB,EAAqCC,YAArC,QAAyD,UAAzD;;AAEA,MAAMC,UAAU,GAAIC,KAAD,IAAW;AAAA;;AAC5B,QAAMC,YAAY,GAAG;AACnBC,IAAAA,MAAM,EAAE,EADW;AAEnBC,IAAAA,KAAK,EAAE,EAFY;AAGnBC,IAAAA,OAAO,EAAE;AAHU,GAArB;AAMA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBd,UAAU,CAACG,YAAD,EAAeM,YAAf,CAApC,CAP4B,CAS5B;;AACA,QAAMM,YAAY,GAAG,MAAOC,IAAP,IAAgB;AACnCC,IAAAA,UAAU;AAEV,UAAMC,GAAG,GAAG,MAAMjB,KAAK,CAACkB,GAAN,CAAW;AACjC,wDAAwDC,OAAQ,4CAD1C,CAAlB;AAGAN,IAAAA,QAAQ,CAAC;AACPO,MAAAA,IAAI,EAAEjB,aADC;AAEPkB,MAAAA,OAAO,EAAEJ,GAAG,CAACK,IAAJ,CAASC;AAFX,KAAD,CAAR;AAID,GAVD,CAV4B,CAsB5B;;;AACA,QAAMC,WAAW,GAAG,MAAMX,QAAQ,CAAC;AAAEO,IAAAA,IAAI,EAAEf;AAAR,GAAD,CAAlC,CAvB4B,CAyB5B;;;AACA,QAAMW,UAAU,GAAG,MAAMH,QAAQ,CAAC;AAAEO,IAAAA,IAAI,EAAEhB;AAAR,GAAD,CAAjC;;AAEA,sBACE,QAAC,YAAD,CAAc,QAAd;AACE,IAAA,KAAK,EAAE;AACLK,MAAAA,MAAM,EAAEG,KAAK,CAACH,MADT;AAELC,MAAAA,KAAK,EAAEE,KAAK,CAACF,KAFR;AAGLC,MAAAA,OAAO,EAAEC,KAAK,CAACD,OAHV;AAILG,MAAAA,YAJK;AAKLU,MAAAA,WALK;AAMLC,MAAAA;AANK,KADT;AAAA,cAUGlB,KAAK,CAACmB;AAVT;AAAA;AAAA;AAAA;AAAA,UADF;AAcD,CA1CD;;GAAMpB,U;;KAAAA,U;AA4CN,eAAeA,UAAf","sourcesContent":["import React, { useReducer } from \"react\";\nimport axios from \"axios\";\nimport MovieContext from \"./MovieContext\";\nimport MovieReducer from \"./MovieReducer\";\nimport { SEARCH_MOVIES, SET_LOADING, CLEAR_MOVIES } from \"../types\";\n\nconst MovieState = (props) => {\n  const initialState = {\n    movies: [],\n    movie: {},\n    loading: false,\n  };\n\n  const [state, dispatch] = useReducer(MovieReducer, initialState);\n\n  // Search Movies\n  const searchMovies = async (text) => {\n    setLoading();\n\n    const res = await axios.get(`SEND REQUEST\n    https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&language=en-US&page=1&include_adult=false`);\n\n    dispatch({\n      type: SEARCH_MOVIES,\n      payload: res.data.items,\n    });\n  };\n\n  // Clear Movies\n  const clearMovies = () => dispatch({ type: CLEAR_MOVIES });\n\n  // Set Loading\n  const setLoading = () => dispatch({ type: SET_LOADING });\n\n  return (\n    <MovieContext.Provider\n      value={{\n        movies: state.movies,\n        movie: state.movie,\n        loading: state.loading,\n        searchMovies,\n        clearMovies,\n        getMovie,\n      }}\n    >\n      {props.children}\n    </MovieContext.Provider>\n  );\n};\n\nexport default MovieState;\n"]},"metadata":{},"sourceType":"module"}